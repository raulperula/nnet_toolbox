function onntool()
	% get screen size
	screenSize = get(0,'ScreenSize');
	
	bgcolor = [236/255 233/255 216/255]; % background color
	bgbtncolor = [0.7 0.7 0.7]; % background color of buttons

	% check window size
	if (screenSize(3) < 800 && screenSize(4) <= 600)
		errordlg('Screen size incompatible.','Error','modal');
	else
		close(gcf);
	end
	
	%% global variables
	
	global paso;
	global guidata;
	global text_data;
	global method_selected;
	global kfold_pushed;
	global train_pushed;
	
	paso = 0;
	method_selected = false;
	kfold_pushed = false;
	train_pushed = false;
	
	%% main figure
	main_id = figure(...
							'Position',[screenSize(3)/5 screenSize(4)/8 800 600],...
							'Color',bgcolor,...
							'Name','onntool',...
							'NumberTitle','off',...
							'Resize','off',...
							'BusyAction','queue',...
							'Interruptible','off',...
							'DoubleBuffer','on',...
							'Menubar','none');
	
	%% header
	txt_title = uicontrol(main_id,...
								'BackgroundColor',bgcolor,...
								'Style','text',...
								'FontSize',15,...
								'FontWeight','bold',...
								'HorizontalAlignment','center',...
								'String','Welcome to the Ordinal Neural Network Tool',...
								'Units','pixels',...
								'Position',[150 525 450 30]);

	uco = imread('img/uco.png','BackgroundColor',bgcolor);
	logo_left_id = axes(...
									'Parent',main_id,...
									'Units','pixels',...
									'Position',[50 525 50 50]);
	set(logo_left_id,'UserData',imshow(uco));
	
	inf = imread('img/inf.png','BackgroundColor',bgcolor);
	logo_right_id = axes(...
									'Parent',main_id,...
									'Units','pixels',...
									'Position',[700 525 50 50]);
	set(logo_right_id,'UserData',imshow(inf));
	
	%% main buttons
	
	imgs = imread(fullfile('img','next.png'),'BackgroundColor',bgbtncolor);
	btn_next = uicontrol(main_id,...
							'Position',[650-110 30 100 25],...
							'CData',imgs,...
							'Callback',@next_Callback);

	imgs = imread(fullfile('img','back.png'),'BackgroundColor',bgbtncolor);
	btn_back = uicontrol(main_id,...
							'Position',[650-220 30 100 25],...
							'CData',imgs,...
							'Callback',@back_Callback);
	set(btn_back,'Visible','off');
	
	imgs = imread(fullfile('img','cancel.png'),'BackgroundColor',bgbtncolor);
	btn_close = uicontrol(main_id,...
								'Position',[650 30 100 25],...
								'CData',imgs,...
								'Callback','clear;close(gcf)');
	
	%% main window content
	ipanel_id = uipanel(...
								'Title','Information',...
								'FontSize',13,...
								'FontWeight','bold',...
								'BackgroundColor',bgcolor,...
								'Units','pixels',...
								'Position',[50 80 345 420]);
	
	text_prin = sprintf(['\n'...
								'In ordinal problems, you can use a neural network to map '...
								'a data set of numeric inputs to a set of ordered labels.\n\n'...
								'Some examples of this type of problems include automobile data '...
								'in some studies (automobile_dataset), bond rate of some cities '...
								'(bondrate_dataset), or estimation of thyroid in some people (thyroid_dataset).\n\n'...
								'The Ordinal Neural Network Tool will help you select data, create '...
								'and train a network, do a K-fold cross-validation, evaluate its '...
								'performance using correlation coefficient ratio and mean absolute '...
								'error, and export the results.']);
	itxt_text = uicontrol(...
							'Parent',ipanel_id,...
							'Style','text',...
							'BackgroundColor',bgcolor,...
							'HorizontalAlignment','left',...
							'Clipping','on',...
							'FontSize',12,...
							'String',text_prin,...
							'Units','pixels',...
							'Position',[5 2 335 390]);
	
	npanel_id = uipanel(...
								'Title','Ordinal Neural Network',...
								'FontSize',13,...
								'FontWeight','bold',...
								'BackgroundColor',bgcolor,...
								'Units','pixels',...
								'Position',[405 80 345 420]);
	
	text_nnet = sprintf(['\n'...
								'The artificial neural network will be formed by a input '...
								'layer, two hidden layers - the first with a specific number of '...
								'neurons and the second with one neuron and without bias, transfer '...
								'function of this layer is a purelin -, the last layer has the same '...
								'number of neurons that the number of categories and transfer '...
								'function is a logsig.\n\n'...
								'To optimize the number of neurons in the first hidden layer, '...
								'the graphical interface has the option to realize a K-fold '...
								'cross-validation over the training set.\n\n'...
								'The network will be trained with ORNNet algorithm (trainirpo) '...
								'that has been implemented by the author specifically for this project.']);
	ntxt_text = uicontrol(...
							'Parent',npanel_id,...
							'Style','text',...
							'BackgroundColor',bgcolor,...
							'HorizontalAlignment','left',...
							'Clipping','on',...
							'FontSize',12,...
							'String',text_nnet,...
							'Units','pixels',...
							'Position',[5 2 335 390]);
	
	%% data window content
	
	% train zone
	train_panel_id = uipanel(...
										'Title','Train Data',...
										'FontSize',12,...
										'BackgroundColor',bgcolor,...
										'Units','pixels',...
										'Position',[50 300 345 200]);
	set(train_panel_id,'Visible','off');
	
	traini_text_id = uicontrol(train_panel_id,...
										'Style','text',...
										'String','Input data:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[40 108 100 22]);
									
	traini_pop_id = uicontrol(train_panel_id,...
										'Style','popupmenu',...
										'String',{''},...
										'Value',1,...
										'Position',[160 110 100 20]);
									
	btn_open = uicontrol(train_panel_id,...
								'Position',[270 108 30 22],...
								'String','...',...
								'Callback',@open_Callback);
									
	traint_text_id = uicontrol(train_panel_id,...
										'Style','text',...
										'String','Target data:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[40 58 100 22]);
									
	traint_pop_id = uicontrol(train_panel_id,...
										'Style','popupmenu',...
										'String',{''},...
										'Value',1,...
										'Position',[160 60 100 20]);
									
	btn_open = uicontrol(train_panel_id,...
								'Position',[270 58 30 22],...
								'String','...',...
								'Callback',@open_Callback);
	
	% test zone
	test_panel_id = uipanel(...
										'Title','Test Data',...
										'FontSize',12,...
										'BackgroundColor',bgcolor,...
										'Units','pixels',...
										'Position',[50 80 345 200]);
	set(test_panel_id,'Visible','off');
	
	testi_text_id = uicontrol(test_panel_id,...
										'Style','text',...
										'String','Input data:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[40 108 100 22]);
									
	testi_pop_id = uicontrol(test_panel_id,...
										'Style','popupmenu',...
										'String',{''},...
										'Value',1,...
										'HorizontalAlignment','center',...
										'Position',[160 110 100 20]);
									
	btn_open = uicontrol(test_panel_id,...
								'Position',[270 108 30 22],...
								'String','...',...
								'Callback',@open_Callback);
									
	testt_text_id = uicontrol(test_panel_id,...
										'Style','text',...
										'String','Target data:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[40 58 100 22]);
									
	testt_pop_id = uicontrol(test_panel_id,...
										'Style','popupmenu',...
										'String',{''},...
										'Value',1,...
										'HorizontalAlignment','center',...
										'Position',[160 60 100 20]);
									
	btn_open = uicontrol(test_panel_id,...
								'Position',[270 58 30 22],...
								'String','...',...
								'Callback',@open_Callback);
							
	%% net window content
	
	param_panel_id = uipanel(...
										'Title','Parameters',...
										'FontSize',12,...
										'BackgroundColor',bgcolor,...
										'Units','pixels',...
										'Position',[50 80 345 420]);
	set(param_panel_id,'Visible','off');
	
	kfold_text_id = uicontrol(param_panel_id,...
										'Style','text',...
										'String','K-fold?',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[35 345 120 22]);
									
	kfold_pop_id = uicontrol(param_panel_id,...
										'Style','popupmenu',...
										'String',{'','Yes','No'},...
										'Value',1,...
										'HorizontalAlignment','center',...
										'Callback',@update_kfold,...
										'Position',[185 350 120 20]);
									
	k_text_id = uicontrol(param_panel_id,...
										'Style','text',...
										'String','k:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[35 295 120 22]);
									
	k_edit_id = uicontrol(param_panel_id,...
									'Style','edit',...
									'String','10',...
									'BackgroundColor','white',...
									'Callback',@update_k,...
							    'Position',[185 300 120 22]);
								
	btn_kfold = uicontrol(param_panel_id,...
									'Position',[185 250 120 25],...
									'String','K-fold',...
									'Callback',@kfold_Callback);
	
	ikfold_text_id = uicontrol(param_panel_id,...
										'Style','text',...
										'String',['If you prefer to manually configure '...
										'the neural net, specify number of neurons '...
										'and transfer function of the hidden layer:'],...
										'HorizontalAlignment','left',...
										'BackgroundColor',bgcolor,...
										'Position',[35 170 270 50]);
									
	neu_text_id = uicontrol(param_panel_id,...
										'Style','text',...
										'String','Neurons:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[35 125 120 22]);
									
	neu_edit_id = uicontrol(param_panel_id,...
									'Style','edit',...
									'String','20',...
									'Callback',@update_nh,...
							    'Position',[185 130 120 22]);
								
	tra_text_id = uicontrol(param_panel_id,...
										'Style','text',...
										'String','Transfer function:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[35 55 120 22]);
									
	tra_pop_id = uicontrol(param_panel_id,...
										'Style','popupmenu',...
										'String',{'tansig','logsig'},...
										'Value',1,...
										'HorizontalAlignment','center',...
										'Callback',@update_trfunc,...
										'Position',[185 60 120 20]);
									
	btn_diagram = uicontrol(main_id,...
									'Position',[50 30 90 25],...
									'String','Diagram',...
									'Callback',@diagram_Callback);
	set(btn_diagram,'Visible','off');
	
	%% train window content
	
	tr_panel_id = uipanel(...
								'Title','Train',...
								'FontSize',12,...
								'BackgroundColor',bgcolor,...
								'Units','pixels',...
								'Position',[50 300 700 200]);
	set(tr_panel_id,'Visible','off');
	
	train_text_id = uicontrol(tr_panel_id,...
										'Style','text',...
										'String','Train an ordinal neural network with the ORNNet algorithm:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[40 120 600 30]);
	
	imgs = imread(fullfile('img','train.png'),'BackgroundColor',bgbtncolor);
	btn_train = uicontrol(tr_panel_id,...
							'Position',[300 50 100 50],...
							'CData',imgs,...
							'Callback',@train_Callback);
									
	res_panel_id = uipanel(...
								'Title','Test results',...
								'FontSize',12,...
								'BackgroundColor',bgcolor,...
								'Units','pixels',...
								'Position',[50 80 700 200]);
	set(res_panel_id,'Visible','off');
	
	res_table_id = uitable(res_panel_id,...
									'ColumnName',{'Dataset','CCR','MAE','NH'},...
									'ColumnWidth',{140},...
									'Position',[50 50 600 100]);
	
	%% export window content
	
	save_panel_id = uipanel(...
								'Title','Save Results',...
								'FontSize',12,...
								'BackgroundColor',bgcolor,...
								'Units','pixels',...
								'Position',[50 80 700 420]);
	set(save_panel_id,'Visible','off');
	
	savn_text_id = uicontrol(save_panel_id,...
										'Style','text',...
										'String','Save network to MATLAB network object named:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[50 250 400 22]);
									
	savn_edit_id = uicontrol(save_panel_id,...
									'Style','edit',...
									'String','net',...
									'BackgroundColor','white',...
							    'Position',[500 250 120 22]);
								
	savo_text_id = uicontrol(save_panel_id,...
										'Style','text',...
										'String','Save outputs to MATLAB matrix named:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[50 250-50 400 22]);
									
	savo_edit_id = uicontrol(save_panel_id,...
									'Style','edit',...
									'String','outputs',...
									'BackgroundColor','white',...
							    'Position',[500 250-50 120 22]);
								
	savr_text_id = uicontrol(save_panel_id,...
										'Style','text',...
										'String','Save results to MATLAB object named:',...
										'BackgroundColor',bgcolor,...
										'HorizontalAlignment','left',...
										'Position',[50 250-100 400 22]);
									
	savr_edit_id = uicontrol(save_panel_id,...
									'Style','edit',...
									'String','results',...
									'BackgroundColor','white',...
							    'Position',[500 250-100 120 22]);
								
	imgs = imread(fullfile('img','save.png'),'BackgroundColor',bgbtncolor);
	btn_sav = uicontrol(save_panel_id,...
									'Position',[500 30 120 25],...
									'CData',imgs,...
									'Callback',@save_Callback);

	%% functions
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to get the next interface
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function next_Callback(hObject,eventdata)
		switch paso
			case 0 % data interface
				% header
				set(txt_title,'HorizontalAlignment','left','String','Select Data');
				
				set(logo_left_id,'UserData',imshow(''));
				set(logo_right_id,'UserData',imshow(''));
				
				imgs = imread(fullfile(matlabroot,'toolbox','nnet','nnresource','icons',...
					'import.png'),'BackgroundColor',bgcolor);
				logo_left_id = axes(...
												'Parent',main_id,...
												'Units','pixels',...
												'Position',[50 525 50 50]);
				set(logo_left_id,'UserData',imshow(imgs));
				
				% objects deactivation
				set(npanel_id,'Visible','off');
								
				% objects activation
				set(train_panel_id,'Visible','on');
				set(test_panel_id,'Visible','on');
				
				% objects change
				set(ipanel_id,'Position',[405 80 345 420]);
				
				text_aux = sprintf(['\nSelect popup menu if it has content, else push open '...
					'button to use a dataset from a file.']);
				set(itxt_text,'String',text_aux);
				
				set(btn_back,'Visible','on');
				
				% prevision of next interface
				update_popup_data();
				
				paso = paso+1;
				
			case 1 % net interface
				if ~isempty(evalin('base','who(''-regexp'', ''train.'')''')) && ...
						~isempty(evalin('base','who(''-regexp'', ''test.'')'''))
					
					% header
					set(txt_title,'HorizontalAlignment','left','String','Network Configuration');

					imgs = imread(fullfile(matlabroot,'toolbox','nnet','nnresource','nnet6',...
						'icon','general','brain_left','48.png'),'BackgroundColor',bgcolor);
					set(logo_left_id,'UserData',imshow(imgs));
					
					% objects deactivation
					set(train_panel_id,'Visible','off');
					set(test_panel_id,'Visible','off');

					% objects activation
					set(param_panel_id,'Visible','on');
					
					% objects change
					text_net = sprintf(['\n'...
											'Ordinal Neural Network Configuration:\n\nNow you have to '...
											'configure the architecture of the neural network. If you want to '...
											'perform a K-fold cross-validation to adjust the number of hidden '...
											'neurons, you must select the option "Yes" in the popup menu. '...
											'A K-fold cross-validation will be performed over the training set, and the number '...
											'of neurons with the lowest MAE error will be selected as the '...
											'optimum one.\n\n'...
											'If you don''t want to realize a K-fold, you must select the '...
											'option "No". You will have to specify manually the number '...
											'of neurons.\nFinally, the transfer function (tansig or logsig) '...
											'for the hidden layer has to be chosen in both cases.']);
					set(itxt_text,'String',text_net);
					
					update_kfold();
					
					paso = paso+1;
				else
					errordlg('No data charged. Try again.','Error','modal');
				end
				
			case 2 % train interface
				if method_selected == true
					% check if method is selected
					string_list = get(kfold_pop_id,'String');
					selected_string = string_list{get(kfold_pop_id,'Value')};
					
					if strcmp(selected_string,'No')
						% creating the neural network
						guidata.net = newoff(guidata.trainInputs,guidata.trainTargets,guidata.NHO,guidata.trfunc);
					elseif strcmp(selected_string,'Yes') && kfold_pushed
						% creating the neural network
						guidata.net = newoff(guidata.trainInputs,guidata.trainTargets,guidata.NHO,guidata.trfunc);
					else
						errordlg('Button K-fold no pushed. Try again.','Error','modal');
						return
					end

					% header
					set(txt_title,'HorizontalAlignment','left','String','Train Network');

					imgs = imread(fullfile(matlabroot,'toolbox','nnet','nnresource','nnet6',...
						'icon','general','data_division','48.png'),'BackgroundColor',bgcolor);
					set(logo_left_id,'UserData',imshow(imgs));

					% objects deactivation
					set(param_panel_id,'Visible','off');
					set(ipanel_id,'Visible','off');

					set(btn_diagram,'Visible','off');

					% objects activation
					set(tr_panel_id,'Visible','on');
					set(res_panel_id,'Visible','on');
					
					set(btn_diagram,'Visible','on');

					paso = paso+1;
					method_selected = false;
				else
					errordlg('No method selected. Please select one.','Error','modal');
				end
				
			case 3 % export interface
				if train_pushed == true
					% header
					set(txt_title,'HorizontalAlignment','left','String','Save Results');

					imgs = imread(fullfile(matlabroot,'toolbox','nnet','nnresource','icons',...
						'export.png'),'BackgroundColor',bgcolor);
					set(logo_left_id,'UserData',imshow(imgs));

					% objects deactivation
					set(tr_panel_id,'Visible','off');
					set(res_panel_id,'Visible','off');
					set(btn_next,'Visible','off');

					% objects activation
					set(save_panel_id,'Visible','on');

					% objects change
					set(btn_back,'Position',[650-110 30 100 25]);
					imgs = imread(fullfile('img','finish.png'),'BackgroundColor',bgbtncolor);
					set(btn_close,'CData',imgs);

					paso = paso+1;
				else
					errordlg('Push Train button to obtain the results. Try again.','Error','modal');
				end
		end
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to get the previous interface
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function back_Callback(hObject,eventdata)
		switch paso
			case 1 % main interface
				% header
				set(txt_title,'HorizontalAlignment','center','String','Welcome to the Ordinal Neural Network Tool');
				
				set(logo_left_id,'UserData',imshow(uco));
				logo_right_id = axes(...
									'Parent',main_id,...
									'Units','pixels',...
									'Position',[700 525 50 50]);
				set(logo_right_id,'UserData',imshow(inf));
				
				% objects activation
				set(npanel_id,'Visible','on');
				
				set(txt_title,'Visible','on');
				
				% objects deactivation
				set(train_panel_id,'Visible','off');
				set(test_panel_id,'Visible','off');
				
				set(btn_back,'Visible','off');
				
				% objects change
				set(ipanel_id,'Position',[50 80 345 420]);
				set(itxt_text,'String',text_prin);
				
				paso = paso-1;
				
			case 2 % data interface
				% header
				set(txt_title,'HorizontalAlignment','left','String','Select Data');
				
				imgs = imread(fullfile(matlabroot,'toolbox','nnet','nnresource','icons',...
					'import.png'),'BackgroundColor',bgcolor);
				set(logo_left_id,'UserData',imshow(imgs));
				
				% objects activation
				set(train_panel_id,'Visible','on');
				set(test_panel_id,'Visible','on');
				
				% objects deactivation
				set(param_panel_id,'Visible','off');
								
				% objects change
				set(itxt_text,'String',text_data);
				
				paso = paso-1;
				
			case 3 % net interface
				% header
				set(txt_title,'HorizontalAlignment','left','String','Network Configuration');
				
				imgs = imread(fullfile(matlabroot,'toolbox','nnet','nnresource','nnet6',...
					'icon','general','brain_left','48.png'),'BackgroundColor',bgcolor);
				set(logo_left_id,'UserData',imshow(imgs));
				
				% objects activation
				set(param_panel_id,'Visible','on');
				set(ipanel_id,'Visible','on');
				
				set(btn_diagram,'Visible','off');
				
				% objects deactivation
				set(tr_panel_id,'Visible','off');
				set(res_panel_id,'Visible','off');
				
				paso = paso-1;
				method_selected = true;
				
			case 4 % interfaz train
				% header
				set(txt_title,'HorizontalAlignment','left','String','Train Network');
				
				imgs = imread(fullfile(matlabroot,'toolbox','nnet','nnresource','nnet6',...
					'icon','general','data_division','48.png'),'BackgroundColor',bgcolor);
				set(logo_left_id,'UserData',imshow(imgs));
				
				% objects activation
				set(tr_panel_id,'Visible','on');
				set(res_panel_id,'Visible','on');
				set(btn_next,'Visible','on');
				
				set(btn_diagram,'Visible','on');
				
				% objects deactivation
				set(save_panel_id,'Visible','off');
				
				% objects change
				set(btn_back,'Position',[650-220 30 100 25]);
				imgs = imread(fullfile('img','cancel.png'),'BackgroundColor',bgbtncolor);
				set(btn_close,'CData',imgs);
				
				paso = paso-1;
		end
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to charge the datasets
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function open_Callback(hObject,eventdata)
		[filename,pathname] = uigetfile({'*.dat','DAT-files (*.dat)';'*.*','All Files (*.*)'},...
			'Select File to Open');
		if filename ~= 0
			if isempty(findstr('.dat',lower(filename)))
				errordlg('File extension invalid. Data file extension is *.dat.','Error','modal');
				return
			else
				 datpath = fullfile(pathname, filename);
			end
		else
			warndlg('No file selected. Please select a correct data file.');
			return
		end
		
		guidata.dataset_name = strtok(filename,'-');
		guidata.dataset_name = guidata.dataset_name(strfind(filename,'_')+1:length(guidata.dataset_name));

		% import file
		importfile(datpath);

		% get parameters
		textdata = evalin('base','textdata');
		data = evalin('base','data');
		v = sscanf(textdata{1}, '%d %d %d');

		% put parameters correctly
		name = strtok(filename,'_');
		C = v(2);
		O = v(3);

		% converting data
		convdata(name, data, C, O);
		
		% check datasets size
		if ~isempty(evalin('base','who(''-regexp'', ''train.'')''')) && ~isempty(evalin('base','who(''-regexp'', ''test.'')'''))
			if (evalin('base','size(trainInputs,1)') ~= evalin('base','size(testInputs,1)')) ||...
				(evalin('base','size(trainTargets,1)') ~= evalin('base','size(testTargets,1)'))
				errordlg('Fail in size of datasets. Please select a correct dataset.','Error','modal');
				return
			end
		end
		
		update_popup_data();
	end
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to show the neural network diagram
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function diagram_Callback(hObject,eventdata)
		persistent JAVA_TOOLS;
		if isempty(JAVA_TOOLS)
			JAVA_TOOLS = javaObjectEDT('com.mathworks.toolbox.nnet.matlab.nnTools');
			mroot = matlabroot;
			nroot = nnetroot;
			sLicense = ~isempty(ver('simulink')) && license('test','simulink');
			JAVA_TOOLS.initialize(mroot,nroot,sLicense);
		end

		diagram = JAVA_TOOLS.newDiagram;

		net = guidata.net;

		inputs = cell(1,net.numInputs);
		for i=1:net.numInputs
			inputs{i} = diagram.newInput;
		end
		layers = cell(1,net.numLayers);
		for i=1:net.numLayers
			layers{i} = diagram.newLayer;
			if ~isfield(net.layers{i},'name'), layerName = net.layers{i}.name;
			else layerName = 'Layer'; end
			layers{i}.layerProperties.title.set(layerName);
			if net.biasConnect(i)
				layers{i}.layerProperties.hasBias.set(true);
			end
		end
		outputs = cell(1,net.numOutputs);
		for i=1:net.numOutputs
			outputs{i} = diagram.newOutput;
		end
		weightGroups = cell(1,net.numLayers);
		numWeights = zeros(1,net.numLayers);
		outputIndex = 1;
		for i=1:net.numLayers
			for j=1:net.numInputs
				if net.inputConnect(i,j)
					weightGroup = layers{i}.newWeightGroup;
					weightGroups{i} = [weightGroups{i} {weightGroup}];
					diagram.newInputToLayerConnection(i-1,j-1,numWeights(i));
					numWeights(i) = numWeights(i) + 1;
				end
			end
			for j=1:net.numLayers
				jTransferFunction = nnjava('get_java_transfer_function',net.layers{i}.transferFcn);
				layers{i}.layerProperties.transferFunction.set(jTransferFunction);
				if net.layerConnect(i,j)
					weightGroup = layers{i}.newWeightGroup;
					weightGroups{i} = [weightGroups{i} {weightGroup}];
					diagram.newLayerToLayerConnection(i-1,j-1,numWeights(i));
					numWeights(i) = numWeights(i) + 1;
				end
			end
			if net.outputConnect(i)
				diagram.newLayerToOutputConnection(outputIndex-1,i-1);
				outputIndex = outputIndex + 1;
			end
		end
		diagram.layoutChildren;

		JAVA_TOOLS.newView(diagram);
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to update the values of popup menu in data interface
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function update_popup_data()
		% show variable names in popup menu
		str_train = evalin('base','who(''-regexp'', ''train.'')''');
		if ~isempty(str_train)
			set(traini_pop_id,'String',str_train);
			set(traint_pop_id,'String',str_train,'Value',2);
		end

		str_test = evalin('base','who(''-regexp'', ''test.'')''');
		if ~isempty(str_test)
			set(testi_pop_id,'String',str_test);
			set(testt_pop_id,'String',str_test,'Value',2);
		end

		% show data information
		if ~isempty(str_train) && ~isempty(str_test)
			guidata.trainInputs = evalin('base','trainInputs');
			guidata.trainTargets = evalin('base','trainTargets');
			guidata.testInputs = evalin('base','testInputs');
			guidata.testTargets = evalin('base','testTargets');
			
			% transform original train targets to final train targets
			guidata.trainTargetsNew = transdata(guidata.trainTargets);
			
			text_data = sprintf(...
										['\n' ...
										'These are the size of train and test data of the selected dataset.\n\n' ...
										'  TrainInputs:   %d x %d\n' ...
										'  TrainTargets:   %d x %d\n' ...
										'\n  TestInputs:   %d x %d\n' ...
										'  TestTargets:   %d x %d'],...
										size(guidata.trainInputs,1),size(guidata.trainInputs,2),...
										size(guidata.trainTargets,1),size(guidata.trainTargets,2),...
										size(guidata.testInputs,1),size(guidata.testInputs,2),...
										size(guidata.testTargets,1),size(guidata.testTargets,2));
			set(itxt_text,'String',text_data);
		end
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to get the kfold popup menu value
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function update_kfold(hObject,eventdata)
		string_list = get(kfold_pop_id,'String');
		selected_string = string_list{get(kfold_pop_id,'Value')};
		
		switch selected_string
			case 'Yes'
				method_selected = true;
				
				set(neu_text_id,'Enable','off');
				set(neu_edit_id,'Enable','off');
				
				set(k_text_id,'Enable','on');
				set(k_edit_id,'Enable','on');
				
				set(btn_kfold,'Enable','on');
				
				set(tra_text_id,'Enable','on');
				set(tra_pop_id,'Enable','on');
			case 'No'
				method_selected = true;
				
				set(neu_text_id,'Enable','on');
				set(neu_edit_id,'Enable','on');
				
				set(k_text_id,'Enable','off');
				set(k_edit_id,'Enable','off');
				
				set(tra_text_id,'Enable','on');
				set(tra_pop_id,'Enable','on');
				
				% update the values
				update_nh();
				update_trfunc();
			otherwise
				method_selected = false;
				
				set(neu_text_id,'Enable','off');
				set(neu_edit_id,'Enable','off');
				
				set(k_text_id,'Enable','off');
				set(k_edit_id,'Enable','off');
				
				set(btn_kfold,'Enable','off');
				
				set(tra_text_id,'Enable','off');
				set(tra_pop_id,'Enable','off');
		end
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to do a K-fold
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function kfold_Callback(hObject,eventdata)
		kfold_pushed = true;
		
		h = waitbar(main_id,'Please wait...');

		update_k();
		guidata.NHO = kfoldo(guidata.trainInputs,guidata.trainTargets,2.^(0:1:3),guidata.k);
		update_trfunc();

		close(h)
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to update k value if K-fold is selected
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function update_k(hObject,eventdata)
		guidata.k = str2num(get(k_edit_id,'String'));
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to update the value of number of neurons in hidden layer
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function update_nh(hObject,eventdata)
		guidata.NHO = str2num(get(neu_edit_id,'String'));
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to update the value of transfer function
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function update_trfunc(hObject,eventdata)
		string_list = get(tra_pop_id,'String');
		guidata.trfunc = string_list{get(tra_pop_id,'Value')};
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% train and simulation function
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function train_Callback(hObject,eventdata)
		train_pushed = true;
		
		% training the net
		net = otrain(guidata.net,guidata.trainInputs,guidata.trainTargetsNew);

		% simulating the net to obtain the outputs
		guidata.testOutputs = osim(net,guidata.testInputs);
		
		% calculating and ploting confussion matrix
		[c,cm,ind,per] = confusion(guidata.testTargets,guidata.testOutputs);
		plotconfusion(guidata.testTargets,guidata.testOutputs);

		% calculating CCR and MAE
		guidata.ccr = ccrcalc(cm, size(guidata.testInputs,2));
		guidata.mae = maecalc(cm, size(guidata.testInputs,2));
		
		% show results in table
		set(res_table_id,'Data',{guidata.dataset_name,guidata.ccr,guidata.mae,guidata.NHO});
		
		% objects change
		imgs = imread(fullfile('img','retrain.png'),'BackgroundColor',bgbtncolor);
		set(btn_train,'CData',imgs);
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% function to export the results
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function save_Callback(hObject,eventdata)
		str = get(savn_edit_id,'String');
		var = genvarname(str);
		assignin('base',var,guidata.net);
		
		str = get(savo_edit_id,'String');
		var = genvarname(str);
		assignin('base',var,guidata.testOutputs);
		
		str = get(savr_edit_id,'String');
		var = genvarname(str);
		struct.ccr = guidata.ccr;
		struct.mae = guidata.mae;
		struct.NHO = guidata.NHO;
		assignin('base',var,struct);
	end

end

